// ------------------------
// gorango.css
// v1.4.1
//
// Last modified: 20-07-2020
// Link: https://github.com/KawanuaDev/gorangocss
// Link: https://gitlab.com/kawanuadev/gorangocss
// ------------------------

// ------------------------
// * Layout
// * Typography
// * Padding
// * Margin
// * border-radius
// ------------------------

// ------------------------
// LAYOUT
// ------------------------

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

article, aside, figcaption, figure, footer, header, hgroup, main, nav, section {
  display: block;
}

.container--fluid {
  width: 100%;
  padding-left: 1rem;
  padding-right: 1rem;
  margin-left: auto;
  margin-right: auto;
}

.container {
  width: 100%;
  padding-left: 1rem;
  padding-right: 1rem;
  margin-left: auto;
  margin-right: auto;
  max-width: 1140px;
}

// ------------------------
// FONT-WEIGHT
// ------------------------
// Usage (SCSS):
// @include fontw(<NUMBER>)
//
// NUMBER  : 100, 200, 300, 400, 500, 600, 700, 800, 900

// Usage (CSS):
// .hairline OR .font--hairline OR .font--100
// .xlight OR .font--xlight OR .font--200
// .light OR .font--light OR .font--300
// .regular OR .font--regular OR .font--400
// .medium OR .font--medium OR .font--500
// .semibold OR .font--semibold OR .font--600
// .bold OR .font--bold OR .font--700
// .xbold OR .font--xbold OR .font--800
// .heavy OR .font--heavy OR .font--900
//
// https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#Common_weight_name_mapping
// ------------------------

@mixin font($num) {
  @if $num < 100 {
    .hairline, .font--hairline, .font--100 {
      font-weight: 100;
    }
  }
  @if $num == 100 {
    .hairline, .font--hairline, .font--100 {
      font-weight: 100;
    }
  }
  @if $num == 200 {
    .xlight, .font--xlight, .font--#{$num} {
      font-weight: 200;
    }
  }
  @if $num == 300 {
    .light, .font--light, .font--#{$num} {
      font-weight: 300;
    }
  }
  @if $num == 400 {
    .regular, .font--regular, .font--#{$num} {
      font-weight: 400;
    }
  }
  @if $num == 500 {
    .medium, .font--medium, .font--#{$num} {
      font-weight: 500;
    }
  }
  @if $num == 600 {
    .semibold, .font--semibold, .font--#{$num} {
      font-weight: 600;
    }
  }
  @if $num == 700 {
    .bold, .font--bold, .font--#{$num} {
      font-weight: 700;
    }
  }
  @if $num == 800 {
    .xbold, .font--xbold, .font--#{$num} {
      font-weight: 800;
    }
  }
  @if $num == 900 {
    .heavy, .font--heavy, .font--#{$num} {
      font-weight: 900;
    }
  }
}

@include font(100);
@include font(200);
@include font(300);
@include font(400);
@include font(500);
@include font(600);
@include font(700);
@include font(800);
@include font(900);

// ------------------------
// PADDING
// ------------------------
// Usage (SCSS):
// @include padding(<NAME>,<NUMBER>,<UNIT>)
//
// NAME    : top, t, right, r, bottom, b, left, l, x, y
// NUMBER  : 1 - unlimited
// UNIT    : px, em, rem

// Usage (CSS):
// .pt--<NUMBER> OR .padding--top--<NUMBER> OR .padding--t--<NUMBER>
// .pr--<NUMBER> OR .padding--right--<NUMBER> OR .padding--r--<NUMBER>
// .pb--<NUMBER> OR .padding--bottom--<NUMBER> OR .padding--b--<NUMBER>
// .pl--<NUMBER> OR .padding--left--<NUMBER> OR .padding--l--<NUMBER>
// .px--<NUMBER> OR .padding--x--<NUMBER>
// .py--<NUMBER> OR .padding--y--<NUMBER>
// ------------------------

@mixin padding($name, $num, $unit) {
  @if $name == "bottom" or $name == "b" {
    .pb--#{$num}, .padding--#{$name}--#{$num} {
      padding-bottom: $num + $unit;
    }    
  }
  @if $name == "top" or $name == "t" {
    .pt--#{$num}, .padding--#{$name}--#{$num} {
      padding-top: $num + $unit;
    }    
  }
  @if $name == "left" or $name == "l" {
    .pl--#{$num}, .padding--#{$name}--#{$num} {
      padding-left: $num + $unit;
    }    
  }
  @if $name == "right" or $name == "r" {
    .pr--#{$num}, .padding--#{$name}--#{$num} {
      padding-right: $num + $unit;
    }    
  }
  @if $name == "y" {
    .py--#{$num}, .padding--#{$name}--#{$num} {
      padding: {
          top: $num + $unit;
          bottom: $num + $unit;
      }
    }    
  }
  @if $name == "x" {
    .px--#{$num}, .padding--#{$name}--#{$num} {
      padding: {
          left: $num + $unit;
          right: $num + $unit;
      }
    }    
  }
}

@include padding(t,1,rem);
@include padding(t,2,rem);
@include padding(t,3,rem);
@include padding(t,4,rem);
@include padding(t,5,rem);
@include padding(t,6,rem);
@include padding(t,7,rem);
@include padding(t,8,rem);
@include padding(t,9,rem);
@include padding(t,10,rem);

@include padding(r,1,rem);
@include padding(r,2,rem);
@include padding(r,3,rem);
@include padding(r,4,rem);
@include padding(r,5,rem);
@include padding(r,6,rem);
@include padding(r,7,rem);
@include padding(r,8,rem);
@include padding(r,9,rem);
@include padding(r,10,rem);

@include padding(b,1,rem);
@include padding(b,2,rem);
@include padding(b,3,rem);
@include padding(b,4,rem);
@include padding(b,5,rem);
@include padding(b,6,rem);
@include padding(b,7,rem);
@include padding(b,8,rem);
@include padding(b,9,rem);
@include padding(b,10,rem);

@include padding(l,1,rem);
@include padding(l,2,rem);
@include padding(l,3,rem);
@include padding(l,4,rem);
@include padding(l,5,rem);
@include padding(l,6,rem);
@include padding(l,7,rem);
@include padding(l,8,rem);
@include padding(l,9,rem);
@include padding(l,10,rem);

@include padding(y,1,rem);
@include padding(y,2,rem);
@include padding(y,3,rem);
@include padding(y,4,rem);
@include padding(y,5,rem);
@include padding(y,6,rem);
@include padding(y,7,rem);
@include padding(y,8,rem);
@include padding(y,9,rem);
@include padding(y,10,rem);

@include padding(x,1,rem);
@include padding(x,2,rem);
@include padding(x,3,rem);
@include padding(x,4,rem);
@include padding(x,5,rem);
@include padding(x,6,rem);
@include padding(x,7,rem);
@include padding(x,8,rem);
@include padding(x,9,rem);
@include padding(x,10,rem);


// ------------------------
// MARGIN
// ------------------------
// Usage (SCSS):
// @include margin(<NAME>,<NUMBER>,<UNIT>)
//
// NAME    : top, t, right, r, bottom, b, left, l, x, y
// NUMBER  : 1 - unlimited
// UNIT    : px, em, rem

// Usage (CSS):
// .mt--<NUMBER> OR .margin--top--<NUMBER> OR .margin--t--<NUMBER>
// .mr---<NUMBER> OR .margin--right--<NUMBER> OR .margin--r--<NUMBER>
// .mb--<NUMBER> OR .margin--bottom--<NUMBER> OR .margin--b--<NUMBER>
// .ml--<NUMBER> OR .margin--left--<NUMBER> OR .margin--l--<NUMBER>
// .mx--<NUMBER> OR .margin--x--<NUMBER>
// .my--<NUMBER> OR .margin--y--<NUMBER>
// ------------------------

@mixin margin($name, $num, $unit) {
  @if $name == "bottom" or $name == "b" {
    .mb--#{$num}, .margin--#{$name}--#{$num} {
      margin-bottom: $num + $unit;
    }    
  }
  @if $name == "top" or $name == "t" {
    .mt--#{$num}, .margin--#{$name}--#{$num} {
      margin-top: $num + $unit;
    }    
  }
  @if $name == "left" or $name == "l" {
    .ml--#{$num}, .margin--#{$name}--#{$num} {
      margin-left: $num + $unit;
    }    
  }
  @if $name == "right" or $name == "r" {
    .mr--#{$num}, .margin--#{$name}--#{$num} {
      margin-right: $num + $unit;
    }    
  }
  @if $name == "y" {
    .my--#{$num}, .margin--#{$name}--#{$num} {
      margin: {
          top: $num + $unit;
          bottom: $num + $unit;
      }
    }    
  }
  @if $name == "x" {
    .mx--#{$num}, .margin--#{$name}--#{$num} {
      margin: {
          left: $num + $unit;
          right: $num + $unit;
      }
    }    
  }
}

@include margin(t,1,rem);
@include margin(t,2,rem);
@include margin(t,3,rem);
@include margin(t,4,rem);
@include margin(t,5,rem);
@include margin(t,6,rem);
@include margin(t,7,rem);
@include margin(t,8,rem);
@include margin(t,9,rem);
@include margin(t,10,rem);

@include margin(r,1,rem);
@include margin(r,2,rem);
@include margin(r,3,rem);
@include margin(r,4,rem);
@include margin(r,5,rem);
@include margin(r,6,rem);
@include margin(r,7,rem);
@include margin(r,8,rem);
@include margin(r,9,rem);
@include margin(r,10,rem);

@include margin(b,1,rem);
@include margin(b,2,rem);
@include margin(b,3,rem);
@include margin(b,4,rem);
@include margin(b,5,rem);
@include margin(b,6,rem);
@include margin(b,7,rem);
@include margin(b,8,rem);
@include margin(b,9,rem);
@include margin(b,10,rem);

@include margin(l,1,rem);
@include margin(l,2,rem);
@include margin(l,3,rem);
@include margin(l,4,rem);
@include margin(l,5,rem);
@include margin(l,6,rem);
@include margin(l,7,rem);
@include margin(l,8,rem);
@include margin(l,9,rem);
@include margin(l,10,rem);

@include margin(y,1,rem);
@include margin(y,2,rem);
@include margin(y,3,rem);
@include margin(y,4,rem);
@include margin(y,5,rem);
@include margin(y,6,rem);
@include margin(y,7,rem);
@include margin(y,8,rem);
@include margin(y,9,rem);
@include margin(y,10,rem);

@include margin(x,1,rem);
@include margin(x,2,rem);
@include margin(x,3,rem);
@include margin(x,4,rem);
@include margin(x,5,rem);
@include margin(x,6,rem);
@include margin(x,7,rem);
@include margin(x,8,rem);
@include margin(x,9,rem);
@include margin(x,10,rem);


// ------------------------
// BORDER-RADIUS
// ------------------------
// Usage (SCSS):
// @include rounded(<NAME>,<NUMBER>,<UNIT>)
//
// NAME    : all, a, top, t, right, r, bottom, b, left, l
// NUMBER  : 1 - unlimited
// UNIT    : px, em, rem

// Usage (CSS):
// .rounded--all--<NUMBER>
// .rounded--top--<NUMBER>
// .rounded--right-<NUMBER>
// .rounded--bottom--<NUMBER>
// .rounded--left--<NUMBER>
// ------------------------

@mixin rounded($name, $num, $unit) {
  @if $name == "all" or $name == "a" {
    @if $num < 1 {
      .rounded--all--1 {
        border-radius: 1 + $unit;
      }
    }
    @if $num >= 1 {
      .rounded--all--#{$num} {
        border-radius: $num + $unit;
      }
    }
  }
  @if $name == "top" or $name == "t" {
    @if $num < 1 {
      .rounded--top--1 {
        border-top-left-radius: 1 + $unit;
        border-top-right-radius: 1 + $unit;
      }
    }
    @if $num >= 1 {
      .rounded--top--#{$num} {
        border-top-left-radius: $num + $unit;
        border-top-right-radius: $num + $unit;
      }
    }
  }
  @if $name == "right" or $name == "r" {
    @if $num < 1 {
      .rounded--right--1 {
        border-top-right-radius: 1 + $unit;
        border-bottom-right-radius: 1 + $unit;
      }
    }
    @if $num >= 1 {
      .rounded--right--#{$num} {
        border-top-right-radius: $num + $unit;
        border-bottom-right-radius: $num + $unit;
      }
    }    
  }
  @if $name == "bottom" or $name == "b" {
    @if $num < 1 {
      .rounded--bottom--1 {
        border-bottom-right-radius: 1 + $unit;
        border-bottom-left-radius: 1 + $unit;
      }
    }
    @if $num >= 1 {
      .rounded--bottom--#{$num} {
        border-bottom-right-radius: $num + $unit;
        border-bottom-left-radius: $num + $unit;
      }
    }
  }
  @if $name == "left" or $name == "l" {
    @if $num < 1 {
      .rounded--left--1 {
        border-bottom-left-radius: 1 + $unit;
        border-top-left-radius: 1 + $unit;
      }
    }
    @if $num >= 1 {
      .rounded--left--#{$num} {
        border-bottom-left-radius: $num + $unit;
        border-top-left-radius: $num + $unit;
      }
    }
  }
}

@include rounded(a,1,rem);
@include rounded(a,2,rem);
@include rounded(a,3,rem);
@include rounded(a,4,rem);
@include rounded(a,5,rem);
@include rounded(a,6,rem);
@include rounded(a,7,rem);
@include rounded(a,8,rem);
@include rounded(a,9,rem);
@include rounded(a,10,rem);

@include rounded(t,1,rem);
@include rounded(t,2,rem);
@include rounded(t,3,rem);
@include rounded(t,4,rem);
@include rounded(t,5,rem);
@include rounded(t,6,rem);
@include rounded(t,7,rem);
@include rounded(t,8,rem);
@include rounded(t,9,rem);
@include rounded(t,10,rem);

@include rounded(r,1,rem);
@include rounded(r,2,rem);
@include rounded(r,3,rem);
@include rounded(r,4,rem);
@include rounded(r,5,rem);
@include rounded(r,6,rem);
@include rounded(r,7,rem);
@include rounded(r,8,rem);
@include rounded(r,9,rem);
@include rounded(r,10,rem);

@include rounded(b,1,rem);
@include rounded(b,2,rem);
@include rounded(b,3,rem);
@include rounded(b,4,rem);
@include rounded(b,5,rem);
@include rounded(b,6,rem);
@include rounded(b,7,rem);
@include rounded(b,8,rem);
@include rounded(b,9,rem);
@include rounded(b,10,rem);

@include rounded(l,1,rem);
@include rounded(l,2,rem);
@include rounded(l,3,rem);
@include rounded(l,4,rem);
@include rounded(l,5,rem);
@include rounded(l,6,rem);
@include rounded(l,7,rem);
@include rounded(l,8,rem);
@include rounded(l,9,rem);
@include rounded(l,10,rem);



